{"ast":null,"code":"var _jsxFileName = \"/home/saisumasri/Desktop/FINAL_PROJECT/final/FRONTEND_CODE/src/Search/Search.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Search.scss\";\nimport maplibregl from \"maplibre-gl\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchComponent = ({\n  onLocationSelected,\n  markerRef,\n  selectedLocation,\n  mapRef\n}) => {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchSuggestions = async query => {\n    if (!query) {\n      setSuggestions([]);\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${process.env.REACT_APP_MAPTILER_AUTOCOMPLETE_API}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refNum: \"Test\",\n          location: query,\n          source: \"test\",\n          boundaryCountry: [],\n          size: 10\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      // Transform the API response to match the LocationData structure\n      const transformedData = data.locations.map((item, index) => ({\n        place_id: `location_${index}`,\n        // generate a unique place_id for each location\n        display_name: item.location,\n        // use the location field for display name\n        lat: item.latitude,\n        // latitude as a number\n        lon: item.longitude // longitude as a number\n      }));\n      setSuggestions(transformedData);\n    } catch (error) {\n      console.error(\"Error fetching suggestions:\", error);\n      setError(\"Error fetching suggestions. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSearch = e => {\n    const newQuery = e.target.value;\n    setQuery(newQuery);\n    fetchSuggestions(newQuery);\n  };\n  const handleLocationSelect = suggestion => {\n    onLocationSelected(suggestion.lat, suggestion.lon);\n    setQuery(suggestion.display_name);\n    setSuggestions([]);\n    if (mapRef) {\n      mapRef.flyTo({\n        center: [suggestion.lon, suggestion.lat],\n        zoom: 16\n      });\n      if (markerRef.current.length > 0) {\n        markerRef.current[0].setLngLat([suggestion.lon, suggestion.lat]);\n      } else {\n        markerRef.current = [new maplibregl.Marker().setLngLat([suggestion.lon, suggestion.lat]).addTo(mapRef)];\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-component\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: query,\n      onChange: handleSearch,\n      placeholder: \"Search for a location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleLocationSelect(suggestion),\n        children: suggestion.display_name\n      }, suggestion.place_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchComponent, \"3OgqCtS7+h7QAFyvCvBeEHmzuBY=\");\n_c = SearchComponent;\nexport default SearchComponent;\nvar _c;\n$RefreshReg$(_c, \"SearchComponent\");","map":{"version":3,"names":["React","useState","maplibregl","jsxDEV","_jsxDEV","SearchComponent","onLocationSelected","markerRef","selectedLocation","mapRef","_s","query","setQuery","suggestions","setSuggestions","loading","setLoading","error","setError","fetchSuggestions","response","fetch","process","env","REACT_APP_MAPTILER_AUTOCOMPLETE_API","method","headers","body","JSON","stringify","refNum","location","source","boundaryCountry","size","ok","Error","status","data","json","transformedData","locations","map","item","index","place_id","display_name","lat","latitude","lon","longitude","console","handleSearch","e","newQuery","target","value","handleLocationSelect","suggestion","flyTo","center","zoom","current","length","setLngLat","Marker","addTo","className","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/saisumasri/Desktop/FINAL_PROJECT/final/FRONTEND_CODE/src/Search/Search.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Search.scss\";\nimport maplibregl from \"maplibre-gl\";\n\ninterface LocationData {\n  place_id: string;\n  display_name: string;\n  lat: number;\n  lon: number;\n}\n\ninterface SearchComponentProps {\n  onLocationSelected: (lat: number, lon: number) => void;\n  markerRef: React.MutableRefObject<maplibregl.Marker[]>;\n  selectedLocation: { lat: number; lon: number };\n  mapRef: maplibregl.Map | null;\n}\n\nconst SearchComponent: React.FC<SearchComponentProps> = ({\n  onLocationSelected,\n  markerRef,\n  selectedLocation,\n  mapRef,\n}) => {\n  const [query, setQuery] = useState(\"\");\n  const [suggestions, setSuggestions] = useState<LocationData[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchSuggestions = async (query: string) => {\n    if (!query) {\n      setSuggestions([]);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`${process.env.REACT_APP_MAPTILER_AUTOCOMPLETE_API}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          refNum: \"Test\",\n          location: query,\n          source: \"test\",\n          boundaryCountry: [],\n          size: 10,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      // Transform the API response to match the LocationData structure\n      const transformedData = data.locations.map((item: any, index: number) => ({\n        place_id: `location_${index}`,  // generate a unique place_id for each location\n        display_name: item.location,    // use the location field for display name\n        lat: item.latitude,             // latitude as a number\n        lon: item.longitude,            // longitude as a number\n      }));\n      setSuggestions(transformedData);\n    } catch (error) {\n      console.error(\"Error fetching suggestions:\", error);\n      setError(\"Error fetching suggestions. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newQuery = e.target.value;\n    setQuery(newQuery);\n    fetchSuggestions(newQuery);\n  };\n\n  const handleLocationSelect = (suggestion: LocationData) => {\n    onLocationSelected(suggestion.lat, suggestion.lon);\n    setQuery(suggestion.display_name);\n    setSuggestions([]);\n\n    if (mapRef) {\n      mapRef.flyTo({\n        center: [suggestion.lon, suggestion.lat],\n        zoom: 16,\n      });\n\n      if (markerRef.current.length > 0) {\n        markerRef.current[0].setLngLat([suggestion.lon, suggestion.lat]);\n      } else {\n        markerRef.current = [\n          new maplibregl.Marker()\n            .setLngLat([suggestion.lon, suggestion.lat])\n            .addTo(mapRef),\n        ];\n      }\n    }\n  };\n\n  return (\n    <div className=\"search-component\">\n      <input\n        type=\"text\"\n        value={query}\n        onChange={handleSearch}\n        placeholder=\"Search for a location\"\n      />\n      {loading && <p>Loading...</p>}\n      {error && <p>{error}</p>}\n      <ul>\n        {suggestions.map((suggestion) => (\n          <li\n            key={suggestion.place_id}\n            onClick={() => handleLocationSelect(suggestion)}\n          >\n            {suggestion.display_name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default SearchComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}